<?php

/**
 * This is the model base class for the table "controls".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Controls".
 *
 * Columns in table "controls" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $mousetype
 * @property double $mouseaccelerate
 * @property double $mousespeed
 * @property double $mousefriction
 * @property double $mousefovchange
 * @property double $keybaccelerate
 * @property double $keybspeed
 * @property double $keybfriction
 * @property double $keybfovchange
 * @property double $keybinvert
 * @property double $fovspeed
 * @property double $fovfriction
 * @property string $movetocursor
 * @property double $cursorsize
 * @property double $headswing
 * @property string $keycodesleft
 * @property string $keycodesright
 * @property string $keycodesup
 * @property string $keycodesdown
 * @property string $keycodesin
 * @property string $keycodesout
 * @property string $zoomtocursor
 * @property string $zoomoutcursor
 * @property double $touchfriction
 * @property string $trackpadzoom
 * @property string $usercontrol
 * @property string $touchtype
 * @property integer $camrollreset
 *
 */
abstract class BaseControls extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'controls';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Controls|Controls', $n);
	}

	public static function representingColumn() {
		return 'mousetype';
	}

	public function rules() {
		return array(
			array('camrollreset', 'numerical', 'integerOnly'=>true),
			array('mouseaccelerate, mousespeed, mousefriction, mousefovchange, keybaccelerate, keybspeed, keybfriction, keybfovchange, keybinvert, fovspeed, fovfriction, cursorsize, headswing, touchfriction', 'numerical'),
			array('mousetype, movetocursor, touchtype', 'length', 'max'=>6),
			array('keycodesleft, keycodesright, keycodesup, keycodesdown, keycodesin, keycodesout', 'length', 'max'=>50),
			array('zoomtocursor, zoomoutcursor, trackpadzoom, usercontrol', 'length', 'max'=>5),
			array('mousetype, mouseaccelerate, mousespeed, mousefriction, mousefovchange, keybaccelerate, keybspeed, keybfriction, keybfovchange, keybinvert, fovspeed, fovfriction, movetocursor, cursorsize, headswing, keycodesleft, keycodesright, keycodesup, keycodesdown, keycodesin, keycodesout, zoomtocursor, zoomoutcursor, touchfriction, trackpadzoom, usercontrol, touchtype, camrollreset', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, mousetype, mouseaccelerate, mousespeed, mousefriction, mousefovchange, keybaccelerate, keybspeed, keybfriction, keybfovchange, keybinvert, fovspeed, fovfriction, movetocursor, cursorsize, headswing, keycodesleft, keycodesright, keycodesup, keycodesdown, keycodesin, keycodesout, zoomtocursor, zoomoutcursor, touchfriction, trackpadzoom, usercontrol, touchtype, camrollreset', 'safe', 'on'=>'search'),
			array('id, mousetype, mouseaccelerate, mousespeed, mousefriction, mousefovchange, keybaccelerate, keybspeed, keybfriction, keybfovchange, keybinvert, fovspeed, fovfriction, movetocursor, cursorsize, headswing, keycodesleft, keycodesright, keycodesup, keycodesdown, keycodesin, keycodesout, zoomtocursor, zoomoutcursor, touchfriction, trackpadzoom, usercontrol, touchtype, camrollreset', 'safe', 'on'=>'api'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'mousetype' => Yii::t('app', 'Mousetype'),
			'mouseaccelerate' => Yii::t('app', 'Mouseaccelerate'),
			'mousespeed' => Yii::t('app', 'Mousespeed'),
			'mousefriction' => Yii::t('app', 'Mousefriction'),
			'mousefovchange' => Yii::t('app', 'Mousefovchange'),
			'keybaccelerate' => Yii::t('app', 'Keybaccelerate'),
			'keybspeed' => Yii::t('app', 'Keybspeed'),
			'keybfriction' => Yii::t('app', 'Keybfriction'),
			'keybfovchange' => Yii::t('app', 'Keybfovchange'),
			'keybinvert' => Yii::t('app', 'Keybinvert'),
			'fovspeed' => Yii::t('app', 'Fovspeed'),
			'fovfriction' => Yii::t('app', 'Fovfriction'),
			'movetocursor' => Yii::t('app', 'Movetocursor'),
			'cursorsize' => Yii::t('app', 'Cursorsize'),
			'headswing' => Yii::t('app', 'Headswing'),
			'keycodesleft' => Yii::t('app', 'Keycodesleft'),
			'keycodesright' => Yii::t('app', 'Keycodesright'),
			'keycodesup' => Yii::t('app', 'Keycodesup'),
			'keycodesdown' => Yii::t('app', 'Keycodesdown'),
			'keycodesin' => Yii::t('app', 'Keycodesin'),
			'keycodesout' => Yii::t('app', 'Keycodesout'),
			'zoomtocursor' => Yii::t('app', 'Zoomtocursor'),
			'zoomoutcursor' => Yii::t('app', 'Zoomoutcursor'),
			'touchfriction' => Yii::t('app', 'Touchfriction'),
			'trackpadzoom' => Yii::t('app', 'Trackpadzoom'),
			'usercontrol' => Yii::t('app', 'Usercontrol'),
			'touchtype' => Yii::t('app', 'Touchtype'),
			'camrollreset' => Yii::t('app', 'Camrollreset'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('mousetype', $this->mousetype, true);
		$criteria->compare('mouseaccelerate', $this->mouseaccelerate);
		$criteria->compare('mousespeed', $this->mousespeed);
		$criteria->compare('mousefriction', $this->mousefriction);
		$criteria->compare('mousefovchange', $this->mousefovchange);
		$criteria->compare('keybaccelerate', $this->keybaccelerate);
		$criteria->compare('keybspeed', $this->keybspeed);
		$criteria->compare('keybfriction', $this->keybfriction);
		$criteria->compare('keybfovchange', $this->keybfovchange);
		$criteria->compare('keybinvert', $this->keybinvert);
		$criteria->compare('fovspeed', $this->fovspeed);
		$criteria->compare('fovfriction', $this->fovfriction);
		$criteria->compare('movetocursor', $this->movetocursor, true);
		$criteria->compare('cursorsize', $this->cursorsize);
		$criteria->compare('headswing', $this->headswing);
		$criteria->compare('keycodesleft', $this->keycodesleft, true);
		$criteria->compare('keycodesright', $this->keycodesright, true);
		$criteria->compare('keycodesup', $this->keycodesup, true);
		$criteria->compare('keycodesdown', $this->keycodesdown, true);
		$criteria->compare('keycodesin', $this->keycodesin, true);
		$criteria->compare('keycodesout', $this->keycodesout, true);
		$criteria->compare('zoomtocursor', $this->zoomtocursor, true);
		$criteria->compare('zoomoutcursor', $this->zoomoutcursor, true);
		$criteria->compare('touchfriction', $this->touchfriction);
		$criteria->compare('trackpadzoom', $this->trackpadzoom, true);
		$criteria->compare('usercontrol', $this->usercontrol, true);
		$criteria->compare('touchtype', $this->touchtype, true);
		$criteria->compare('camrollreset', $this->camrollreset);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}