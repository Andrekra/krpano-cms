<?php

/**
 * This is the model base class for the table "hotspots".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Hotspots".
 *
 * Columns in table "hotspots" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $metadata
 * @property integer $location_id
 * @property string $name
 * @property string $alturl
 * @property string $keep
 * @property string $devices
 * @property string $visible
 * @property string $enabled
 * @property string $scale9grid
 * @property integer $zorder
 * @property string $capture
 * @property string $children
 * @property string $preload
 * @property string $blendmode
 * @property string $edge
 * @property string $ox
 * @property string $oy
 * @property string $zoom
 * @property string $distorted
 * @property double $rx
 * @property double $ry
 * @property double $rz
 * @property integer $inverserotation
 * @property double $flying
 * @property string $width
 * @property string $height
 * @property double $scale
 * @property double $altscale
 * @property double $rotate
 * @property integer $smoothing
 * @property string $accuracy
 * @property double $alpha
 * @property integer $usecontentsize
 * @property string $metatype
 * @property string $meta
 * @property string $url
 * @property double $ath
 * @property double $atv
 * @property string $onover
 * @property string $onout
 * @property string $onclick
 * @property string $crop
 * @property string $onovercrop
 * @property string $ondowncrop
 * @property integer $scalechildren
 * @property string $mask
 * @property string $effect
 * @property string $onhover
 * @property string $ondown
 * @property string $onup
 * @property string $onloaded
 * @property string $altonloaded
 * @property integer $handcursor
 * @property string $style
 * @property string $effects
 *
 */
abstract class BaseHotspots extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'hotspots';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Hotspots|Hotspots', $n);
	}

	public static function representingColumn() {
		return 'keep';
	}

	public function rules() {
		return array(
			array('location_id, zorder, inverserotation, smoothing, usecontentsize, scalechildren, handcursor', 'numerical', 'integerOnly'=>true),
			array('rx, ry, rz, flying, scale, altscale, rotate, alpha, ath, atv', 'numerical'),
			array('name, width, height', 'length', 'max'=>50),
			array('alturl, devices, scale9grid, ox, oy, url, onover, onout, onclick, crop, onovercrop, ondowncrop, mask, effect, onhover, ondown, onup, onloaded, altonloaded, style', 'length', 'max'=>200),
			array('metadata, keep, visible, enabled, capture, children, preload, blendmode, edge, zoom, distorted, accuracy, metatype, meta, effects', 'safe'),
			array('metadata, location_id, name, alturl, keep, devices, visible, enabled, scale9grid, zorder, capture, children, preload, blendmode, edge, ox, oy, zoom, distorted, rx, ry, rz, inverserotation, flying, width, height, scale, altscale, rotate, smoothing, accuracy, alpha, usecontentsize, metatype, meta, url, ath, atv, onover, onout, onclick, crop, onovercrop, ondowncrop, scalechildren, mask, effect, onhover, ondown, onup, onloaded, altonloaded, handcursor, style, effects', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, metadata, location_id, name, alturl, keep, devices, visible, enabled, scale9grid, zorder, capture, children, preload, blendmode, edge, ox, oy, zoom, distorted, rx, ry, rz, inverserotation, flying, width, height, scale, altscale, rotate, smoothing, accuracy, alpha, usecontentsize, metatype, meta, url, ath, atv, onover, onout, onclick, crop, onovercrop, ondowncrop, scalechildren, mask, effect, onhover, ondown, onup, onloaded, altonloaded, handcursor, style, effects', 'safe', 'on'=>'search'),
			array('id, metadata, location_id, name, alturl, keep, devices, visible, enabled, scale9grid, zorder, capture, children, preload, blendmode, edge, ox, oy, zoom, distorted, rx, ry, rz, inverserotation, flying, width, height, scale, altscale, rotate, smoothing, accuracy, alpha, usecontentsize, metatype, meta, url, ath, atv, onover, onout, onclick, crop, onovercrop, ondowncrop, scalechildren, mask, effect, onhover, ondown, onup, onloaded, altonloaded, handcursor, style, effects', 'safe', 'on'=>'api'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'metadata' => Yii::t('app', 'Metadata'),
			'location_id' => Yii::t('app', 'Location'),
			'name' => Yii::t('app', 'Name'),
			'alturl' => Yii::t('app', 'Alturl'),
			'keep' => Yii::t('app', 'Keep'),
			'devices' => Yii::t('app', 'Devices'),
			'visible' => Yii::t('app', 'Visible'),
			'enabled' => Yii::t('app', 'Enabled'),
			'scale9grid' => Yii::t('app', 'Scale9grid'),
			'zorder' => Yii::t('app', 'Zorder'),
			'capture' => Yii::t('app', 'Capture'),
			'children' => Yii::t('app', 'Children'),
			'preload' => Yii::t('app', 'Preload'),
			'blendmode' => Yii::t('app', 'Blendmode'),
			'edge' => Yii::t('app', 'Edge'),
			'ox' => Yii::t('app', 'Ox'),
			'oy' => Yii::t('app', 'Oy'),
			'zoom' => Yii::t('app', 'Zoom'),
			'distorted' => Yii::t('app', 'Distorted'),
			'rx' => Yii::t('app', 'Rx'),
			'ry' => Yii::t('app', 'Ry'),
			'rz' => Yii::t('app', 'Rz'),
			'inverserotation' => Yii::t('app', 'Inverserotation'),
			'flying' => Yii::t('app', 'Flying'),
			'width' => Yii::t('app', 'Width'),
			'height' => Yii::t('app', 'Height'),
			'scale' => Yii::t('app', 'Scale'),
			'altscale' => Yii::t('app', 'Altscale'),
			'rotate' => Yii::t('app', 'Rotate'),
			'smoothing' => Yii::t('app', 'Smoothing'),
			'accuracy' => Yii::t('app', 'Accuracy'),
			'alpha' => Yii::t('app', 'Alpha'),
			'usecontentsize' => Yii::t('app', 'Usecontentsize'),
			'metatype' => Yii::t('app', 'Metatype'),
			'meta' => Yii::t('app', 'Meta'),
			'url' => Yii::t('app', 'Url'),
			'ath' => Yii::t('app', 'Ath'),
			'atv' => Yii::t('app', 'Atv'),
			'onover' => Yii::t('app', 'Onover'),
			'onout' => Yii::t('app', 'Onout'),
			'onclick' => Yii::t('app', 'Onclick'),
			'crop' => Yii::t('app', 'Crop'),
			'onovercrop' => Yii::t('app', 'Onovercrop'),
			'ondowncrop' => Yii::t('app', 'Ondowncrop'),
			'scalechildren' => Yii::t('app', 'Scalechildren'),
			'mask' => Yii::t('app', 'Mask'),
			'effect' => Yii::t('app', 'Effect'),
			'onhover' => Yii::t('app', 'Onhover'),
			'ondown' => Yii::t('app', 'Ondown'),
			'onup' => Yii::t('app', 'Onup'),
			'onloaded' => Yii::t('app', 'Onloaded'),
			'altonloaded' => Yii::t('app', 'Altonloaded'),
			'handcursor' => Yii::t('app', 'Handcursor'),
			'style' => Yii::t('app', 'Style'),
			'effects' => Yii::t('app', 'Effects'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('metadata', $this->metadata, true);
		$criteria->compare('location_id', $this->location_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('alturl', $this->alturl, true);
		$criteria->compare('keep', $this->keep, true);
		$criteria->compare('devices', $this->devices, true);
		$criteria->compare('visible', $this->visible, true);
		$criteria->compare('enabled', $this->enabled, true);
		$criteria->compare('scale9grid', $this->scale9grid, true);
		$criteria->compare('zorder', $this->zorder);
		$criteria->compare('capture', $this->capture, true);
		$criteria->compare('children', $this->children, true);
		$criteria->compare('preload', $this->preload, true);
		$criteria->compare('blendmode', $this->blendmode, true);
		$criteria->compare('edge', $this->edge, true);
		$criteria->compare('ox', $this->ox, true);
		$criteria->compare('oy', $this->oy, true);
		$criteria->compare('zoom', $this->zoom, true);
		$criteria->compare('distorted', $this->distorted, true);
		$criteria->compare('rx', $this->rx);
		$criteria->compare('ry', $this->ry);
		$criteria->compare('rz', $this->rz);
		$criteria->compare('inverserotation', $this->inverserotation);
		$criteria->compare('flying', $this->flying);
		$criteria->compare('width', $this->width, true);
		$criteria->compare('height', $this->height, true);
		$criteria->compare('scale', $this->scale);
		$criteria->compare('altscale', $this->altscale);
		$criteria->compare('rotate', $this->rotate);
		$criteria->compare('smoothing', $this->smoothing);
		$criteria->compare('accuracy', $this->accuracy, true);
		$criteria->compare('alpha', $this->alpha);
		$criteria->compare('usecontentsize', $this->usecontentsize);
		$criteria->compare('metatype', $this->metatype, true);
		$criteria->compare('meta', $this->meta, true);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('ath', $this->ath);
		$criteria->compare('atv', $this->atv);
		$criteria->compare('onover', $this->onover, true);
		$criteria->compare('onout', $this->onout, true);
		$criteria->compare('onclick', $this->onclick, true);
		$criteria->compare('crop', $this->crop, true);
		$criteria->compare('onovercrop', $this->onovercrop, true);
		$criteria->compare('ondowncrop', $this->ondowncrop, true);
		$criteria->compare('scalechildren', $this->scalechildren);
		$criteria->compare('mask', $this->mask, true);
		$criteria->compare('effect', $this->effect, true);
		$criteria->compare('onhover', $this->onhover, true);
		$criteria->compare('ondown', $this->ondown, true);
		$criteria->compare('onup', $this->onup, true);
		$criteria->compare('onloaded', $this->onloaded, true);
		$criteria->compare('altonloaded', $this->altonloaded, true);
		$criteria->compare('handcursor', $this->handcursor);
		$criteria->compare('style', $this->style, true);
		$criteria->compare('effects', $this->effects, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}