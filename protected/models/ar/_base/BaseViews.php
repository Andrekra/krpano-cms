<?php

/**
 * This is the model base class for the table "views".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Views".
 *
 * Columns in table "views" available as properties of the model,
 * followed by relations of table "views" available as properties of the model.
 *
 * @property integer $id
 * @property double $hlookat
 * @property double $vlookat
 * @property double $camroll
 * @property double $fov
 * @property string $fovtype
 * @property double $fovmin
 * @property double $fovmax
 * @property double $maxpixelzoom
 * @property string $limitfov
 * @property double $fisheye
 * @property double $fisheyefovlink
 * @property string $stereographic
 * @property string $pannini
 * @property double $architectural
 * @property string $architecturalonlymiddle
 * @property string $limitview
 * @property double $hlookatmin
 * @property double $hlookatmax
 * @property double $vlookatmin
 * @property double $vlookatmax
 *
 * @property Locations[] $locations
 */
abstract class BaseViews extends BaseModel {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'views';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Views|Views', $n);
	}

	public static function representingColumn() {
		return 'fovtype';
	}

	public function rules() {
		return array(
			array('hlookat, vlookat, camroll, fov, fovmin, fovmax, maxpixelzoom, fisheye, fisheyefovlink, architectural, hlookatmin, hlookatmax, vlookatmin, vlookatmax', 'numerical'),
			array('fovtype', 'length', 'max'=>4),
			array('limitfov, stereographic, pannini, architecturalonlymiddle', 'length', 'max'=>5),
			array('limitview', 'length', 'max'=>9),
			array('hlookat, vlookat, camroll, fov, fovtype, fovmin, fovmax, maxpixelzoom, limitfov, fisheye, fisheyefovlink, stereographic, pannini, architectural, architecturalonlymiddle, limitview, hlookatmin, hlookatmax, vlookatmin, vlookatmax', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, hlookat, vlookat, camroll, fov, fovtype, fovmin, fovmax, maxpixelzoom, limitfov, fisheye, fisheyefovlink, stereographic, pannini, architectural, architecturalonlymiddle, limitview, hlookatmin, hlookatmax, vlookatmin, vlookatmax', 'safe', 'on'=>'search'),
			array('id, hlookat, vlookat, camroll, fov, fovtype, fovmin, fovmax, maxpixelzoom, limitfov, fisheye, fisheyefovlink, stereographic, pannini, architectural, architecturalonlymiddle, limitview, hlookatmin, hlookatmax, vlookatmin, vlookatmax', 'safe', 'on'=>'api'),
		);
	}

	public function relations() {
		return array(
			'locations' => array(self::HAS_MANY, 'Locations', 'view_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'hlookat' => Yii::t('app', 'Hlookat'),
			'vlookat' => Yii::t('app', 'Vlookat'),
			'camroll' => Yii::t('app', 'Camroll'),
			'fov' => Yii::t('app', 'Fov'),
			'fovtype' => Yii::t('app', 'Fovtype'),
			'fovmin' => Yii::t('app', 'Fovmin'),
			'fovmax' => Yii::t('app', 'Fovmax'),
			'maxpixelzoom' => Yii::t('app', 'Maxpixelzoom'),
			'limitfov' => Yii::t('app', 'Limitfov'),
			'fisheye' => Yii::t('app', 'Fisheye'),
			'fisheyefovlink' => Yii::t('app', 'Fisheyefovlink'),
			'stereographic' => Yii::t('app', 'Stereographic'),
			'pannini' => Yii::t('app', 'Pannini'),
			'architectural' => Yii::t('app', 'Architectural'),
			'architecturalonlymiddle' => Yii::t('app', 'Architecturalonlymiddle'),
			'limitview' => Yii::t('app', 'Limitview'),
			'hlookatmin' => Yii::t('app', 'Hlookatmin'),
			'hlookatmax' => Yii::t('app', 'Hlookatmax'),
			'vlookatmin' => Yii::t('app', 'Vlookatmin'),
			'vlookatmax' => Yii::t('app', 'Vlookatmax'),
			'locations' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('hlookat', $this->hlookat);
		$criteria->compare('vlookat', $this->vlookat);
		$criteria->compare('camroll', $this->camroll);
		$criteria->compare('fov', $this->fov);
		$criteria->compare('fovtype', $this->fovtype, true);
		$criteria->compare('fovmin', $this->fovmin);
		$criteria->compare('fovmax', $this->fovmax);
		$criteria->compare('maxpixelzoom', $this->maxpixelzoom);
		$criteria->compare('limitfov', $this->limitfov, true);
		$criteria->compare('fisheye', $this->fisheye);
		$criteria->compare('fisheyefovlink', $this->fisheyefovlink);
		$criteria->compare('stereographic', $this->stereographic, true);
		$criteria->compare('pannini', $this->pannini, true);
		$criteria->compare('architectural', $this->architectural);
		$criteria->compare('architecturalonlymiddle', $this->architecturalonlymiddle, true);
		$criteria->compare('limitview', $this->limitview, true);
		$criteria->compare('hlookatmin', $this->hlookatmin);
		$criteria->compare('hlookatmax', $this->hlookatmax);
		$criteria->compare('vlookatmin', $this->vlookatmin);
		$criteria->compare('vlookatmax', $this->vlookatmax);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}