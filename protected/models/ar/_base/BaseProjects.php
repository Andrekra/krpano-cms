<?php

/**
 * This is the model base class for the table "projects".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Projects".
 *
 * Columns in table "projects" available as properties of the model,
 * followed by relations of table "projects" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $keywords
 * @property integer $default_location_id
 * @property integer $progress_id
 * @property integer $autorotate_id
 * @property integer $control_id
 * @property integer $display_id
 * @property integer $memory_id
 * @property integer $network_id
 * @property integer $user_id
 *
 * @property Locations[] $locations
 * @property Progresses $progress
 * @property Users $user
 * @property Autorotates $autorotate
 * @property Controls $control
 * @property Displays $display
 * @property Memories $memory
 * @property Networks $network
 */
abstract class BaseProjects extends BaseModel {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'projects';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Projects|Projects', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('default_location_id, progress_id, autorotate_id, control_id, display_id, memory_id, network_id, user_id', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>255),
			array('description, keywords', 'safe'),
			array('name, description, keywords, default_location_id, progress_id, autorotate_id, control_id, display_id, memory_id, network_id, user_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, description, keywords, default_location_id, progress_id, autorotate_id, control_id, display_id, memory_id, network_id, user_id', 'safe', 'on'=>'search'),
			array('id, name, description, keywords, default_location_id, progress_id, autorotate_id, control_id, display_id, memory_id, network_id, user_id', 'safe', 'on'=>'api'),
		);
	}

	public function relations() {
		return array(
			'locations' => array(self::HAS_MANY, 'Locations', 'project_id'),
			'progress' => array(self::BELONGS_TO, 'Progresses', 'progress_id'),
			'user' => array(self::BELONGS_TO, 'Users', 'user_id'),
			'autorotate' => array(self::BELONGS_TO, 'Autorotates', 'autorotate_id'),
			'control' => array(self::BELONGS_TO, 'Controls', 'control_id'),
			'display' => array(self::BELONGS_TO, 'Displays', 'display_id'),
			'memory' => array(self::BELONGS_TO, 'Memories', 'memory_id'),
			'network' => array(self::BELONGS_TO, 'Networks', 'network_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'description' => Yii::t('app', 'Description'),
			'keywords' => Yii::t('app', 'Keywords'),
			'default_location_id' => Yii::t('app', 'Default Location'),
			'progress_id' => null,
			'autorotate_id' => null,
			'control_id' => null,
			'display_id' => null,
			'memory_id' => null,
			'network_id' => null,
			'user_id' => null,
			'locations' => null,
			'progress' => null,
			'user' => null,
			'autorotate' => null,
			'control' => null,
			'display' => null,
			'memory' => null,
			'network' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('keywords', $this->keywords, true);
		$criteria->compare('default_location_id', $this->default_location_id);
		$criteria->compare('progress_id', $this->progress_id);
		$criteria->compare('autorotate_id', $this->autorotate_id);
		$criteria->compare('control_id', $this->control_id);
		$criteria->compare('display_id', $this->display_id);
		$criteria->compare('memory_id', $this->memory_id);
		$criteria->compare('network_id', $this->network_id);
		$criteria->compare('user_id', $this->user_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}