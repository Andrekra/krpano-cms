<?php

/**
 * This is the model base class for the table "krpano_properties".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "KrpanoProperties".
 *
 * Columns in table "krpano_properties" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $collection
 * @property string $category
 * @property string $property
 * @property string $description
 * @property string $example
 * @property string $input_type
 * @property string $input_options
 * @property integer $read_only
 * @property string $type
 * @property string $min
 * @property string $max
 * @property string $step
 * @property string $default
 * @property integer $ipad_compatible
 * @property integer $view_only
 * @property integer $is_advanced
 *
 */
abstract class BaseKrpanoProperties extends BaseModel {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'krpano_properties';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'KrpanoProperties|KrpanoProperties', $n);
	}

	public static function representingColumn() {
		return 'property';
	}

	public function rules() {
		return array(
			array('property', 'required'),
			array('read_only, ipad_compatible, view_only, is_advanced', 'numerical', 'integerOnly'=>true),
			array('collection', 'length', 'max'=>50),
			array('category, type', 'length', 'max'=>12),
			array('property, input_options', 'length', 'max'=>255),
			array('input_type', 'length', 'max'=>7),
			array('min, max, step, default', 'length', 'max'=>11),
			array('description, example', 'safe'),
			array('collection, category, description, example, input_type, input_options, read_only, type, min, max, step, default, ipad_compatible, view_only, is_advanced', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, collection, category, property, description, example, input_type, input_options, read_only, type, min, max, step, default, ipad_compatible, view_only, is_advanced', 'safe', 'on'=>'search'),
			array('id, collection, category, property, description, example, input_type, input_options, read_only, type, min, max, step, default, ipad_compatible, view_only, is_advanced', 'safe', 'on'=>'api'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'collection' => Yii::t('app', 'Collection'),
			'category' => Yii::t('app', 'Category'),
			'property' => Yii::t('app', 'Property'),
			'description' => Yii::t('app', 'Description'),
			'example' => Yii::t('app', 'Example'),
			'input_type' => Yii::t('app', 'Input Type'),
			'input_options' => Yii::t('app', 'Input Options'),
			'read_only' => Yii::t('app', 'Read Only'),
			'type' => Yii::t('app', 'Type'),
			'min' => Yii::t('app', 'Min'),
			'max' => Yii::t('app', 'Max'),
			'step' => Yii::t('app', 'Step'),
			'default' => Yii::t('app', 'Default'),
			'ipad_compatible' => Yii::t('app', 'Ipad Compatible'),
			'view_only' => Yii::t('app', 'View Only'),
			'is_advanced' => Yii::t('app', 'Is Advanced'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('collection', $this->collection, true);
		$criteria->compare('category', $this->category, true);
		$criteria->compare('property', $this->property, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('example', $this->example, true);
		$criteria->compare('input_type', $this->input_type, true);
		$criteria->compare('input_options', $this->input_options, true);
		$criteria->compare('read_only', $this->read_only);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('min', $this->min, true);
		$criteria->compare('max', $this->max, true);
		$criteria->compare('step', $this->step, true);
		$criteria->compare('default', $this->default, true);
		$criteria->compare('ipad_compatible', $this->ipad_compatible);
		$criteria->compare('view_only', $this->view_only);
		$criteria->compare('is_advanced', $this->is_advanced);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}