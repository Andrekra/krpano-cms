<?php

/**
 * This is the model base class for the table "networks".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Networks".
 *
 * Columns in table "networks" available as properties of the model,
 * followed by relations of table "networks" available as properties of the model.
 *
 * @property integer $id
 * @property integer $downloadqueues
 * @property integer $decodequeues
 * @property integer $retrycount
 * @property string $caching
 * @property integer $cachesize
 *
 * @property Projects[] $projects
 */
abstract class BaseNetworks extends BaseModel {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'networks';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Networks|Networks', $n);
	}

	public static function representingColumn() {
		return 'caching';
	}

	public function rules() {
		return array(
			array('downloadqueues, decodequeues, retrycount, cachesize', 'numerical', 'integerOnly'=>true),
			array('caching', 'length', 'max'=>5),
			array('downloadqueues, decodequeues, retrycount, caching, cachesize', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, downloadqueues, decodequeues, retrycount, caching, cachesize', 'safe', 'on'=>'search'),
			array('id, downloadqueues, decodequeues, retrycount, caching, cachesize', 'safe', 'on'=>'api'),
		);
	}

	public function relations() {
		return array(
			'projects' => array(self::HAS_MANY, 'Projects', 'network_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'downloadqueues' => Yii::t('app', 'Downloadqueues'),
			'decodequeues' => Yii::t('app', 'Decodequeues'),
			'retrycount' => Yii::t('app', 'Retrycount'),
			'caching' => Yii::t('app', 'Caching'),
			'cachesize' => Yii::t('app', 'Cachesize'),
			'projects' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('downloadqueues', $this->downloadqueues);
		$criteria->compare('decodequeues', $this->decodequeues);
		$criteria->compare('retrycount', $this->retrycount);
		$criteria->compare('caching', $this->caching, true);
		$criteria->compare('cachesize', $this->cachesize);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}